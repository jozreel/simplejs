var net = require('net');
var config = require('simple').config;
//var config = require('simple').config.hos;
var simplesock = function(){
	
	this.options  = {host:config.host, port:config.socketport}
}

simplesock.clients ={};


simplesock.prototype.create = function(){
	var obj = this;
	console.log(obj);
var server = net.createServer(function(socket){
	var socAddr = socket.remoteAddress;
	var socPort = socket.remotePort;
	
	socket.write('hello welcome to test socket');
	socket.on('data', function(data)
	{
		//crypto.createHash('sha1').update(JSON.stringify(input)).digest('hex')
		
		
		var dataObj =  data.toString('utf8');
		console.log(dataObj);
		var matches = dataObj.match(new RegExp(/Sec-WebSocket-Key: (.*)/));
		
		if(matches != null)
		{
			var endOfLine = require('os').EOL;
			 var trmd = matches[1].trim();
			  var crypto =require('crypto');
			var crypt = crypto.createHash('sha1').update(trmd+'258EAFA5-E914-47DA-95CA-C5AB0DC85B11').digest('base64');
			//console.log(crypt);
			var respns = 'HTTP/1.1 101 Switching Protocols\r\n'+
                          'Upgrade: websocket\r\n'+
                           'Connection: Upgrade\r\n'+
                           'Sec-WebSocket-Accept: '+crypt;+endOfLine+ '\r\n\r\n';
		 
		   socket.write(respns,'ascii',function(err)
		    {console.log(err);}
		  );
		}
		else
		  console.log(data.toString());
		
		/*if(dataObj.Sec-WebSocket-Key != undefined)
		{
		   var wskey = dataObj.Sec-WebSocket-Key + 
		}
		*/
		//if(dataObj.function !== undefined && dataObj.function =='init')
		//    obj.initSocket(dataObj,socket);
	    //else
		  // simplesock.handleMessage(dataObj);
		
	});
	socket.on('end',function(){
	 // delete obj.clients[socket.user];
	 // console.log(obj.clients);
	  //log in storage time left	
	});
});

return server;
}

simplesock.prototype.handleMessage=function(data)
{
	
	console.log(data.sender, data.message, data.messagetype, data.recipient)
	//this.socket.write(data,);
}
simplesock.prototype.initSocket =function(data,socket)
{   socket.user = data.user;
	obj.clients[data.user] = socket;
}

module.exports = simplesock;